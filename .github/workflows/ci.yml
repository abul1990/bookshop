name: Continuous Integration

on:
  push:
    branches: [ "**" ]

jobs:
  build:
    name: Build service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Java JDK 8
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '8'
          cache: 'gradle'

      - name: Build service
        run: |
          chmod +x gradlew
          ./gradlew clean build
        continue-on-error: false

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            build/*
          retention-days: 5

          #   sonar:
          #     name: Sonar Scan
          #     runs-on: ubuntu-latest
          #     needs: build
          #     steps:
          #       - name: Checkout repository
          #         uses: actions/checkout@v3

          #       - name: Download all build artifacts
          #         uses: actions/download-artifact@v3
          #         with:
          #           name: build-artifacts

          #       - name: SonarQube Scan
          #         uses: sonarsource/sonarqube-scan-action@master

          #       - name: SonarQube Quality Gate check
          #         continue-on-error: true
          #         uses: sonarsource/sonarqube-quality-gate-action@master
          #         # Force to fail step after specific time
          #         timeout-minutes: 5


          #       - name: Result of sonarqube scan
          #         run: |
          #           echo "Report is available"

  dockerize:
    name: Dockerize
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

          #       - name: Set Docker Tag Name
          #         if: startsWith(github.ref, 'refs/tags/')
          #         run: |
          #           echo "DOCKER_TAG=ref,event=tag" >> $GITHUB_ENV
          #       - name: Set Docker Tag Name
          #         if: (!startsWith(github.ref, 'refs/tags/'))
          #         run: |
          #           echo "DOCKER_TAG=sha" >> $GITHUB_ENV

      - name: setting docker version
        run: |
          IFS=-
          set -- `git describe --long --tags --dirty --always`
          version=`basename $1``date '+%s'`
          echo "Version:$version"
          echo  "::set-output name=tag_version::$version"
          echo "DOCKER_TAG=$version" >> "$GITHUB_ENV"

      - name: Extract Metadata for Docker
        id: docker_metadata
        uses: docker/metadata-action@v3
        with:
          images: bookshop
          flavor: |
            latest=false
          tags: |
            type=raw

      - name: Build Docker Image
        run: |
          
          echo "tag 2:" ${{ steps.docker_metadata.outputs.tags }}
          echo "tag 3:" ${{ env.DOCKER_TAG }}
          docker build -t bookshop-api-ci:latest .